const NUM_PARTICLES = 20;
const canvas = document.getElementById("smoke-canvas");
const ctx = canvas.getContext("2d");
let raf;
if (canvas) {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight + 100;
}
const particles = [];
const fps = 30;
const fpsInterval = 1e3 / fps;
let then = Date.now();
const smokeImage = new Image();
smokeImage.src = "/smoke.webp";
class Particle {
  x;
  y;
  size;
  opacity;
  rotation;
  rotationSpeed;
  constructor() {
    this.x = Math.random() * canvas.width - canvas.width;
    this.y = Math.random() * canvas.height - canvas.height / 2;
    this.size = Math.random() * 3e3 + 1e3;
    this.opacity = Math.random() * 0.8;
    this.rotation = Math.random() * Math.PI * 2;
    this.rotationSpeed = Math.random() * 2e-3;
  }
  update() {
    this.rotation += this.rotationSpeed;
  }
  draw() {
    ctx.save();
    ctx.translate(this.x + this.size / 2, this.y + this.size / 2);
    ctx.rotate(this.rotation);
    ctx.globalAlpha = this.opacity;
    ctx.drawImage(
      smokeImage,
      -this.size / 2,
      -this.size / 2,
      this.size,
      this.size
    );
    ctx.globalAlpha = 1;
    ctx.restore();
  }
}
function init() {
  for (let i = 0; i < NUM_PARTICLES; i++) {
    particles.push(new Particle());
  }
}
function handleParticles() {
  for (let i = 0; i < particles.length; i++) {
    particles[i].update();
    particles[i].draw();
    if (particles[i].size <= 1) {
      particles.splice(i, 1);
      i--;
      particles.push(new Particle());
    }
  }
}
function animate() {
  raf = requestAnimationFrame(animate);
  const now = Date.now();
  const elapsed = now - then;
  if (elapsed > fpsInterval) {
    then = now - elapsed % fpsInterval;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    handleParticles();
  }
}
const reducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
if (!reducedMotion.matches) {
  window.addEventListener("resize", () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight + 100;
    cancelAnimationFrame(raf);
    handleParticles();
    animate();
  });
  smokeImage.onload = () => {
    init();
    animate();
  };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNtb2tlQmFja2dyb3VuZC5hc3RybyJdLCJzb3VyY2VzQ29udGVudCI6WyI8ZGl2IGlkPVwic21va2UtYmtnXCIgY2xhc3M9XCJmaXhlZCB0b3AtMCAtei0xMCBoLWZ1bGwgdy1mdWxsXCI+XHJcbiAgPGNhbnZhc1xyXG4gICAgaWQ9XCJzbW9rZS1jYW52YXNcIlxyXG4gICAgYXJpYS1sYWJlbD1cIkVmZWN0byBkZSBmb25kbyBkZSBodW1vXCJcclxuICAgIGNsYXNzPVwib3BhY2l0eS03MCBkYXJrOm9wYWNpdHktNDBcIj48L2NhbnZhcz5cclxuPC9kaXY+XHJcblxyXG48c2NyaXB0PlxyXG4gIGNvbnN0IE5VTV9QQVJUSUNMRVMgPSAyMDsgLy8gTsO6bWVybyBkZSBwYXJ0w61jdWxhc1xyXG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic21va2UtY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gIGxldCByYWY6IG51bWJlcjtcclxuXHJcbiAgaWYgKGNhbnZhcykge1xyXG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgMTAwO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFydGljbGVzOiBQYXJ0aWNsZVtdID0gW107XHJcbiAgY29uc3QgZnBzID0gMzA7IC8vIERlc2VhZG8gRlBTXHJcbiAgY29uc3QgZnBzSW50ZXJ2YWwgPSAxMDAwIC8gZnBzOyAvLyBJbnRlcnZhbG8gZGUgdGllbXBvIGVudHJlIGZvdG9ncmFtYXNcclxuICBsZXQgdGhlbiA9IERhdGUubm93KCk7XHJcblxyXG4gIC8vIENhcmdhIGxhIHRleHR1cmEgZGUgaHVtb1xyXG4gIGNvbnN0IHNtb2tlSW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICBzbW9rZUltYWdlLnNyYyA9IFwiL3Ntb2tlLndlYnBcIjsgLy8gQXNlZ8O6cmF0ZSBkZSBxdWUgbGEgcnV0YSBhIGxhIHRleHR1cmEgc2VhIGNvcnJlY3RhXHJcblxyXG4gIGNsYXNzIFBhcnRpY2xlIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgIHJvdGF0aW9uOiBudW1iZXI7XHJcbiAgICByb3RhdGlvblNwZWVkOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIHRoaXMueCA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMud2lkdGggLSBjYW52YXMud2lkdGg7XHJcbiAgICAgIHRoaXMueSA9IE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0IC0gY2FudmFzLmhlaWdodCAvIDI7XHJcbiAgICAgIHRoaXMuc2l6ZSA9IE1hdGgucmFuZG9tKCkgKiAzMDAwICsgMTAwMDsgLy8gQWp1c3RhciBwYXJhIHRleHR1cmEgeSAneidcclxuICAgICAgdGhpcy5vcGFjaXR5ID0gTWF0aC5yYW5kb20oKSAqIDAuODsgLy8gT3BhY2lkYWQgaW5pY2lhbCBhbGVhdG9yaWFcclxuICAgICAgdGhpcy5yb3RhdGlvbiA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjsgLy8gUm90YWNpw7NuIGluaWNpYWwgYWxlYXRvcmlhXHJcbiAgICAgIHRoaXMucm90YXRpb25TcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAwLjAwMjsgLy8gVmVsb2NpZGFkIGRlIHJvdGFjacOzblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgdGhpcy5yb3RhdGlvbiArPSB0aGlzLnJvdGF0aW9uU3BlZWQ7IC8vIEFjdHVhbGl6YXIgbGEgcm90YWNpw7NuXHJcbiAgICB9XHJcblxyXG4gICAgZHJhdygpIHtcclxuICAgICAgY3R4LnNhdmUoKTsgLy8gR3VhcmRhciBlbCBlc3RhZG8gYWN0dWFsIGRlbCBjb250ZXh0b1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHRoaXMueCArIHRoaXMuc2l6ZSAvIDIsIHRoaXMueSArIHRoaXMuc2l6ZSAvIDIpOyAvLyBNb3ZlciBlbCBvcmlnZW4gYWwgY2VudHJvIGRlIGxhIHBhcnTDrWN1bGFcclxuICAgICAgY3R4LnJvdGF0ZSh0aGlzLnJvdGF0aW9uKTsgLy8gUm90YXJcclxuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5vcGFjaXR5OyAvLyBPcGFjaWRhZFxyXG4gICAgICBjdHguZHJhd0ltYWdlKFxyXG4gICAgICAgIHNtb2tlSW1hZ2UsXHJcbiAgICAgICAgLXRoaXMuc2l6ZSAvIDIsXHJcbiAgICAgICAgLXRoaXMuc2l6ZSAvIDIsXHJcbiAgICAgICAgdGhpcy5zaXplLFxyXG4gICAgICAgIHRoaXMuc2l6ZVxyXG4gICAgICApOyAvLyBEaWJ1amFyIGltYWdlblxyXG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7IC8vIFJlc3RhYmxlY2VyIG9wYWNpZGFkXHJcbiAgICAgIGN0eC5yZXN0b3JlKCk7IC8vIFJlc3RhdXJhciBlbCBlc3RhZG8gb3JpZ2luYWwgZGVsIGNvbnRleHRvXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOVU1fUEFSVElDTEVTOyBpKyspIHtcclxuICAgICAgcGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlUGFydGljbGVzKCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgcGFydGljbGVzW2ldLnVwZGF0ZSgpO1xyXG4gICAgICBwYXJ0aWNsZXNbaV0uZHJhdygpO1xyXG5cclxuICAgICAgaWYgKHBhcnRpY2xlc1tpXS5zaXplIDw9IDEpIHtcclxuICAgICAgICBwYXJ0aWNsZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIGktLTtcclxuICAgICAgICBwYXJ0aWNsZXMucHVzaChuZXcgUGFydGljbGUoKSk7IC8vIEHDsWFkaXIgbnVldmEgcGFydMOtY3VsYSBwYXJhIG1hbnRlbmVyIGVsIG7Dum1lcm9cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuXHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgZWxhcHNlZCA9IG5vdyAtIHRoZW47XHJcblxyXG4gICAgaWYgKGVsYXBzZWQgPiBmcHNJbnRlcnZhbCkge1xyXG4gICAgICB0aGVuID0gbm93IC0gKGVsYXBzZWQgJSBmcHNJbnRlcnZhbCk7XHJcblxyXG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgIGhhbmRsZVBhcnRpY2xlcygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVkdWNlZE1vdGlvbiA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIik7XHJcblxyXG4gIGlmICghcmVkdWNlZE1vdGlvbi5tYXRjaGVzKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgMTAwO1xyXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xyXG4gICAgICBoYW5kbGVQYXJ0aWNsZXMoKTtcclxuICAgICAgYW5pbWF0ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc21va2VJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIGluaXQoKTtcclxuICAgICAgYW5pbWF0ZSgpO1xyXG4gICAgfTtcclxuICB9XHJcbjwvc2NyaXB0PiJdLCJtYXBwaW5ncyI6IkFBUUUsTUFBTSxnQkFBZ0I7QUFDdEIsTUFBTSxTQUFTLFNBQVMsZUFBZSxjQUFjO0FBQ3JELE1BQU0sTUFBTSxPQUFPLFdBQVcsSUFBSTtBQUNsQyxJQUFJO0FBRUosSUFBSSxRQUFRO0FBQ1YsU0FBTyxRQUFRLE9BQU87QUFDdEIsU0FBTyxTQUFTLE9BQU8sY0FBYztBQUN2QztBQUVBLE1BQU0sWUFBd0IsQ0FBQztBQUMvQixNQUFNLE1BQU07QUFDWixNQUFNLGNBQWMsTUFBTztBQUMzQixJQUFJLE9BQU8sS0FBSyxJQUFJO0FBR3BCLE1BQU0sYUFBYSxJQUFJLE1BQU07QUFDN0IsV0FBVyxNQUFNO0FBRWpCLE1BQU0sU0FBUztFQUNiO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUVBLGNBQWM7QUFDWixTQUFLLElBQUksS0FBSyxPQUFPLElBQUksT0FBTyxRQUFRLE9BQU87QUFDL0MsU0FBSyxJQUFJLEtBQUssT0FBTyxJQUFJLE9BQU8sU0FBUyxPQUFPLFNBQVM7QUFDekQsU0FBSyxPQUFPLEtBQUssT0FBTyxJQUFJLE1BQU87QUFDbkMsU0FBSyxVQUFVLEtBQUssT0FBTyxJQUFJO0FBQy9CLFNBQUssV0FBVyxLQUFLLE9BQU8sSUFBSSxLQUFLLEtBQUs7QUFDMUMsU0FBSyxnQkFBZ0IsS0FBSyxPQUFPLElBQUk7RUFDdkM7RUFFQSxTQUFTO0FBQ1AsU0FBSyxZQUFZLEtBQUs7RUFDeEI7RUFFQSxPQUFPO0FBQ0wsUUFBSSxLQUFLO0FBQ1QsUUFBSSxVQUFVLEtBQUssSUFBSSxLQUFLLE9BQU8sR0FBRyxLQUFLLElBQUksS0FBSyxPQUFPLENBQUM7QUFDNUQsUUFBSSxPQUFPLEtBQUssUUFBUTtBQUN4QixRQUFJLGNBQWMsS0FBSztBQUN2QixRQUFJO01BQ0Y7TUFDQSxDQUFDLEtBQUssT0FBTztNQUNiLENBQUMsS0FBSyxPQUFPO01BQ2IsS0FBSztNQUNMLEtBQUs7SUFDUDtBQUNBLFFBQUksY0FBYztBQUNsQixRQUFJLFFBQVE7RUFDZDtBQUNGO0FBRUEsU0FBUyxPQUFPO0FBQ2QsV0FBUyxJQUFJLEdBQUcsSUFBSSxlQUFlLEtBQUs7QUFDdEMsY0FBVSxLQUFLLElBQUksU0FBUyxDQUFDO0VBQy9CO0FBQ0Y7QUFFQSxTQUFTLGtCQUFrQjtBQUN6QixXQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxLQUFLO0FBQ3pDLGNBQVUsQ0FBQyxFQUFFLE9BQU87QUFDcEIsY0FBVSxDQUFDLEVBQUUsS0FBSztBQUVsQixRQUFJLFVBQVUsQ0FBQyxFQUFFLFFBQVEsR0FBRztBQUMxQixnQkFBVSxPQUFPLEdBQUcsQ0FBQztBQUNyQjtBQUNBLGdCQUFVLEtBQUssSUFBSSxTQUFTLENBQUM7SUFDL0I7RUFDRjtBQUNGO0FBRUEsU0FBUyxVQUFVO0FBQ2pCLFFBQU0sc0JBQXNCLE9BQU87QUFFbkMsUUFBTSxNQUFNLEtBQUssSUFBSTtBQUNyQixRQUFNLFVBQVUsTUFBTTtBQUV0QixNQUFJLFVBQVUsYUFBYTtBQUN6QixXQUFPLE1BQU8sVUFBVTtBQUV4QixRQUFJLFVBQVUsR0FBRyxHQUFHLE9BQU8sT0FBTyxPQUFPLE1BQU07QUFDL0Msb0JBQWdCO0VBQ2xCO0FBQ0Y7QUFFQSxNQUFNLGdCQUFnQixPQUFPLFdBQVcsa0NBQWtDO0FBRTFFLElBQUksQ0FBQyxjQUFjLFNBQVM7QUFDMUIsU0FBTyxpQkFBaUIsVUFBVSxNQUFNO0FBQ3RDLFdBQU8sUUFBUSxPQUFPO0FBQ3RCLFdBQU8sU0FBUyxPQUFPLGNBQWM7QUFDckMseUJBQXFCLEdBQUc7QUFDeEIsb0JBQWdCO0FBQ2hCLFlBQVE7RUFDVixDQUFDO0FBRUQsYUFBVyxTQUFTLE1BQU07QUFDeEIsU0FBSztBQUNMLFlBQVE7RUFDVjtBQUNGOyIsIm5hbWVzIjpbXX0=